generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  habits        Habit[]
  sessions      Session[]
  todos         Todo[]
}

model Habit {
  id          String   @id @default(cuid())
  userID      String
  title       String   @db.VarChar(15)
  description String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userID], references: [id])
  todos       Todo[]
}

model Todo {
  id         String     @id @default(cuid())
  userID     String
  habitID    String
  text       String
  completed  Boolean    @default(false)
  importance Importance @default(low)
  createdAt  DateTime   @default(now())
  habit      Habit      @relation(fields: [habitID], references: [id])
  user       User       @relation(fields: [userID], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Importance {
  low
  medium
  high
}
